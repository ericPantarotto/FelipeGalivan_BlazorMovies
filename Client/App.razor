@inject LazyAssemblyLoader lazyLoader
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using System.Reflection


<CascadingValue Value="AppMode.WebAssembly">
    <CascadingValue Value= "7" Name="ValueInt">
        <CascadingValue Value="@StringValue" Name="ValueString">

            <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="OnNavigateAsync"
                    AdditionalAssemblies="lazyLoadedAssemblies">

                <Found Context="routeData">
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                        <Authorizing>
                            <text>Custom Authorizing</text>
                        </Authorizing>
                        <NotAuthorized>
                            <text>Custom not authorized ❌</text>
                        </NotAuthorized>
                    </AuthorizeRouteView>
                    <FocusOnNavigate RouteData="@routeData" Selector="h1" />
                </Found>
                <NotFound>
                    <CascadingAuthenticationState>
                        <PageTitle>Not found</PageTitle>
                        <LayoutView Layout="@typeof(MainLayout)">
                            <CustomNotFound />
                        </LayoutView>
                    </CascadingAuthenticationState>
                </NotFound>
            </Router>

        </CascadingValue>
    </CascadingValue>
</CascadingValue>


@code {
    private List<Assembly> lazyLoadedAssemblies = new();
    
    public string StringValue { get; set; } = "test:string";

    private async Task OnNavigateAsync(NavigationContext args) {
        if (args.Path.EndsWith("counter")) {
            var assemblies = await lazyLoader.LoadAssembliesAsync(
                new List<string> { "MathNet.Numerics.dll" });
            lazyLoadedAssemblies.AddRange(assemblies);
        }
        lazyLoadedAssemblies.Add(typeof(Component1).Assembly);
    }
}