@inject IDisplayMessage displayMessage

@for (int i = 1; i <= MaximumRating; i++)
{
    var starNumber = i;
    <span @onclick="@(() => onclickHandle(starNumber))"
          @onmouseover="@(() => onmouseoverHandle(starNumber))"
          @onmouseleave="@(() => onmouseleaveHandle())"
            style="cursor:pointer;"
          class="fa fa-star fa-lg @(selectedRating >= i ? "checked" : null)">

    </span>
}

@code {
    [Parameter] public int MaximumRating { get; set; }
    [Parameter] public int VotedRating { get; set; }
    [Parameter] public EventCallback<int> OnVote { get; set; }
    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool voted = false;
    private int selectedRating;

    protected  override void OnInitialized()
    {
        selectedRating = VotedRating;
        if (selectedRating > 0)
        {
            voted = true;
        }
    }

    private async Task onclickHandle(int starNumber)
    {
        var authState = await AuthenticationState!;
        var user = authState.User;

        if (!user.Identity!.IsAuthenticated)
        {
            await displayMessage.DisplayErrorMessage("You must login in order to vote");
            return;
        }

        selectedRating = starNumber;
        voted = true;
        VotedRating = selectedRating;
        await OnVote.InvokeAsync(selectedRating);
    }

    private void onmouseoverHandle(int starNumber)
    {
        selectedRating = starNumber;
    }
    private void onmouseleaveHandle()
    {
        if (voted)
        {
            selectedRating = VotedRating;
        }
        else
        {
            selectedRating = 0;
        }
    }
}
